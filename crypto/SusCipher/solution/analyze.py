sbox = [
    43,  8, 57, 53, 48, 39, 15, 61,
     7, 44, 33,  9, 19, 41,  3, 14,
    42, 51,  6,  2, 49, 28, 55, 31,
     0,  4, 30,  1, 59, 50, 35, 47,
    25, 16, 37, 27, 10, 54, 26, 58,
    62, 13, 18, 22, 21, 24, 12, 20,
    29, 38, 23, 32, 60, 34,  5, 11,
    45, 63, 40, 46, 52, 36, 17, 56
]

table = [[0 for j in range(64)] for i in range(64)]
for i in range(64):
    for j in range(64):
        x = i ^ j
        y = sbox[i] ^ sbox[j]

        table[x][y] += 1

lis = [(table[i][j], i, j) for i in range(64) for j in range(64)]
lis.sort(reverse=True)

for i in range(1, 21):
    print(f"{lis[i][0]} {lis[i][1]:06b} {lis[i][2]:06b}")

# With this, it is possible to find a specific pattern in permutation layer manually

# 110011 010110 (1) -> 111000 010100 (2) -> 010010 111000 (3)
# 101001 101000 (2) -> 010010 111000 (4) -> 101001 101000 (5)
# 110101 011000 (3) -> 001010 000110 (6) -> 001010 000110 (7)
# 010010 111000 (4) -> 101001 101000 (5) -> 000101 111111 (8)
# 110011 010110 (5) -> 101001 101000 (3) -> 010010 111000 (6)
# 110101 011000 (6) -> 010001 101100 (7) -> 001011 000010 (1)
# 010010 111000 (7) -> 101001 101000 (1) -> 000101 111111 (4)
# 101001 101000 (8) -> 001010 000110 (8) -> 000101 111111 (2)